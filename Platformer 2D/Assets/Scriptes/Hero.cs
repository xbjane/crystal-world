using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Hero : Entity
{
    [SerializeField] AudioSource audioSource;
    public AudioClip jump;
    public AudioClip damage;
    public AudioClip hit;
    public AudioClip hitEnemy;
    public bool isAttacking;
    public bool isRecharged;
    public Transform attackPos; //позици€ атаки
    public float attackRange; //дальность атаки
    public LayerMask enemy; //слой с врагами
    [SerializeField] private float speed = 3f; //переменные, скорость
    [SerializeField] private List<Image> hearts;//количество жизней
    [SerializeField] private float jumpForce = 3f;//сила прыжка
    private bool isGrounded;//переменна€, содержаща€ значение находитс€ ли персонаж на земле
    //private int allLives;
    private bool isJumping;
    private Rigidbody2D rb; //ссылки на компоненты
    private Animator anim;
    private SpriteRenderer sprite;

    public Joystick joystick;
    public static Hero Instance { get; set; } //сингелтон, позвол€ющий использовать обращение ко все публичным пол€м и методам без создани€ экхемпл€ра класса
    private States State //создаЄм свойство типа State(по названию списка)
    {
        get { return (States)anim.GetInteger("state"); } //получаем значение State из аниматора
        set { anim.SetInteger("state", (int)value); }//мен€ем на новое
    }
    private void Awake()
    {
        rb = GetComponent<Rigidbody2D>(); //получаем компоненты
        anim = GetComponent<Animator>();
        sprite = GetComponentInChildren<SpriteRenderer>();//компонент находитс€ в дочернем элементе (sprite)
        Instance = this;
        isGrounded = CheckGround();
        //if (isGrounded)
        //    isJumping = false;
        isJumping =false;
        isAttacking = false;
        isRecharged = true;
        lives = 3;
    }
    private void FixedUpdate()
    {
        isGrounded = CheckGround();
        if (isGrounded) State = States.idle;//если на земле, значит стоим
        if (!isAttacking && joystick.Horizontal!=0)
            Run();
        if (!isAttacking && isGrounded && joystick.Vertical >= 0.5)
            Jump();
        //if (lives < allLives)
        //{
        //    allLives--;
        //    Destroy(hearts[lives - 1]);
        //}

    }
    private void Jump()
    {
        if (!isJumping)
        {
            isJumping = true;
            State = States.jump;
            rb.velocity = Vector2.up * jumpForce; //линейна€ скорость по направлению
            audioSource.PlayOneShot(jump);
            StartCoroutine(WaitForJump());
        }
        //rb.AddForce(transform.up*jumpForce, ForceMode2D.Impulse);
    }
    private IEnumerator WaitForJump()
    {
        yield return new WaitForSeconds(0.2f);
        isJumping = false;
    }
    private void Run() //метод дл€ бега
    {
        if (CheckGround()) State = States.run;
        Vector3 dir = transform.right * joystick.Horizontal;
        transform.position = Vector3.MoveTowards(transform.position, transform.position+dir,speed*Time.deltaTime);//задаЄм движение(параметры: текущее положение, место дл€ перемещени€, скорость)
        sprite.flipX = dir.x < 0.0f;//поворот персонажа(переключение галочки)
    }
    public void Attack()
    {
        if (isGrounded && isRecharged)
        {
            Debug.Log("Attack");
            State = States.attack;
            isAttacking = true;
            isRecharged = false;
            StartCoroutine(AttackAnimation()); //корутина выполн€етс€ параллельно основному потоку
            StartCoroutine(AttackCoolDown());
        }
    }
    private IEnumerator AttackAnimation() //подсчЄт времени атаки 
    {
        yield return new WaitForSeconds(0.4f); //отдать процессорное врем€ основному потоку и продолжить спуст€ указанное врем€
        isAttacking = false;
    }
    private IEnumerator AttackCoolDown() //подсчЄт времени перезар€дки
    {
        yield return new WaitForSeconds(0.5f);
        isRecharged = true;
    }
    private void OnAttack()
    {
        Collider2D[] colliders = Physics2D.OverlapCircleAll(attackPos.position, attackRange, enemy);//возвращает массив коллайдеров, наход€щийс€ вокруг указанной точки в указанном радиусе
        if (colliders.Length == 0)
        {
            audioSource.PlayOneShot(hit);
        }
        else
        {
            audioSource.PlayOneShot(hitEnemy);
            for (int i = 0; i < colliders.Length; i++)
            {
                colliders[i].GetComponent<Entity>().GetDamage();
                if(colliders[i].GetComponent<Entity>().lives!=0)
                StartCoroutine(EnemyOnAttack(colliders[i]));
            }
        }
    }
    private void OnDrawGizmosSelected() //нарисовать сферу, показывающую радиус атаки
    {
        Gizmos.color = Color.red;
        Gizmos.DrawWireSphere(attackPos.position, attackRange);
    }
    private bool CheckGround()
    {
        Collider2D[] collider = Physics2D.OverlapCircleAll(transform.position + transform.up * (-0.2f), 0.08f);//создаЄм массив коллайдеров(смещение системы кординат к ногам помогает искать колайдеры у ног)
        isGrounded = collider.Length>1;//(1 - коллайдер персонажа, который тоже считаетс€)
        Debug.Log(collider.Length);
        int i = 0;
        foreach (Collider2D c in collider)
        {
            Debug.Log(i++);
           Debug.Log(transform.position + transform.up * (-0.1f) - c./*gameObject.*/transform.position); ;

        }
        if (!isGrounded) State = States.jump;
        return isGrounded;
    }
    public override void GetDamage()
    {
        audioSource.PlayOneShot(damage);
        lives--;
        if (lives >= 1)
            Destroy(hearts[lives].gameObject);
        else
        {
            Destroy(hearts[0].gameObject);
            Die();
        }
    }
    private IEnumerator EnemyOnAttack(Collider2D enemy) //корутина дл€ эффекта удара по врагу
    {
        SpriteRenderer enemyColor = enemy.GetComponentInChildren<SpriteRenderer>();
        enemyColor.color = new Color(0.95f, 0.49f, 0.43f);
        yield return new WaitForSeconds(0.2f);
        enemyColor.color = new Color(1, 1, 1);
    }
}

public enum States//список состо€ний
{
    idle, 
    run,
    jump,
    attack
}
